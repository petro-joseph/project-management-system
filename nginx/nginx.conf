events {}

http {
    resolver 127.0.0.11 valid=10s; # Use Docker's internal DNS resolver

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 256;
    gzip_comp_level 5;

    # Limit client upload size
    client_max_body_size 10M;

    # Basic rate limiting zone (10MB shared memory, 1 request per second, burst 5)
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=1r/s;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Redirect HTTP to HTTPS
    server {
        listen 8080;
        listen [::]:8085;
        server_name localhost;
        return 301 https://$server_name$request_uri;
    }

    # HTTPS Server
    server {
        listen 443 ssl; # Listen on 443 for HTTPS
        listen [::]:443 ssl; # Listen on 443 for HTTPS (IPv6)
        http2 on; # Enable HTTP/2 (Modern syntax)
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Apply rate limiting to all requests
        limit_req zone=mylimit burst=5 nodelay;

        # Frontend
        # Use ^~ for higher priority prefix match
        location ^~ /frontend/ {
            proxy_pass http://frontend:3000/; # Add trailing slash
            
            # Remove rewrite as proxy_pass now handles the path correctly
            # rewrite ^/frontend/(.*)$ /frontend/$1 break;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket headers for Vite HMR
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Optional: Increase buffer sizes if needed
            # proxy_buffers 8 16k;
            # proxy_buffer_size 32k;
        }

        location / {
            return 301 /frontend/;
        }

        # Backend API
        location /api/ {
            proxy_pass http://backend:3001; # Use service name
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Other location blocks removed as per request
    }
}
